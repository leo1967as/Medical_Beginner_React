// File: backend/diagnosisService.js (No changes from original)
// ... (‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå diagnosisService.js ‡πÄ‡∏î‡∏¥‡∏°) ...
import { GoogleGenerativeAI } from "@google/generative-ai";

if (!process.env.OPENROUTER_API_KEY) {
    throw new Error("FATAL ERROR: OPENROUTER_API_KEY is not defined in your .env file.");
}
if (!process.env.GEMINI_API_KEY) {
    throw new Error("FATAL ERROR: GEMINI_API_KEY is not defined for fallback usage in your .env file.");
}

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const diagnosisModelGemini = genAI.getGenerativeModel({
    model: "gemini-1.5-flash",
    generationConfig: { response_mime_type: "application/json" }
});

async function generateWithOpenRouter(prompt) {
    const OPENROUTER_ENDPOINT = 'https://openrouter.ai/api/v1/chat/completions';
    const model = process.env.OPENROUTER_MODEL || "google/gemini-flash";
    console.log(`üîå [AI Service] Sending request to OpenRouter (Primary) with model: ${model}...`);
    
    // Use environment variables for production-safe headers
    const httpReferer = process.env.OPENROUTER_HTTP_REFERER || 'https://medical-learner.vercel.app';
    const xTitle = process.env.OPENROUTER_X_TITLE || 'Medical Learner AI';
    
    const systemPrompt = `**Role and Goal:** You are an Analytical Wellness Advisor AI. Your sole purpose is to analyze the provided patient data to generate a coherent, safe, and logically structured analysis in a complete JSON object format.`;
    const body = {
        model: model,
        messages: [{ role: "system", content: systemPrompt }, { role: "user", content: prompt }],
        response_format: { "type": "json_object" }
    };
    
    const response = await fetch(OPENROUTER_ENDPOINT, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
            'HTTP-Referer': httpReferer,
            'X-Title': xTitle,
        },
        body: JSON.stringify(body),
    });
    
    if (!response.ok) {
        const errorBody = await response.text();
        // Log minimal error info to prevent exposure
        console.error(`‚ùå [AI Service] OpenRouter API failed with status ${response.status}`);
        throw new Error(`OpenRouter API request failed with status ${response.status}`);
    }
    
    const data = await response.json();
    if (data.choices?.[0]?.message?.content) {
        return data.choices[0].message.content;
    } else {
        throw new Error("Invalid response structure from OpenRouter API");
    }
}

async function generateWithGemini(prompt) {
    console.log("‚ö°Ô∏è [AI Service] OpenRouter failed. Falling back to Google Gemini...");
    try {
        const result = await diagnosisModelGemini.generateContent(prompt);
        const responseText = result.response.text();
        console.log("‚úÖ [AI Service] Received response from Gemini successfully.");
        return responseText;
    } catch (geminiError) {
        console.error('‚ùå [AI Service] Gemini Error:', geminiError.message);
        throw new Error(`AI service failed: ${geminiError.message}`);
    }
}

async function generateContent(prompt) {
    try {
        const result = await generateWithOpenRouter(prompt);
        console.log("‚úÖ [AI Service] Received response from OpenRouter successfully.");
        return result;
    } catch (error) {
        console.error('‚ùå [AI Service] OpenRouter Error:', error.message);
        return await generateWithGemini(prompt);
    }
}

const calculateBMI = (weight, height) => {
    if (!weight || !height || height <= 0) return { value: 0, category: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' };
    const heightInMeters = parseFloat(height) / 100;
    const bmiValue = (parseFloat(weight) / (heightInMeters * heightInMeters)).toFixed(2);
    let category = '';
    if (bmiValue < 18.5) category = '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå';
    else if (bmiValue < 23) category = '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏™‡∏°‡∏™‡πà‡∏ß‡∏ô)';
    else if (bmiValue < 25) category = '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô';
    else if (bmiValue < 30) category = '‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏ß‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà 1';
    else category = '‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏ß‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà 2 (‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢)';
    return { value: bmiValue, category: category };
};

const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

function buildFullContext(userData, bmi) {
    const parts = [];
    const profile = userData.health_profile || {};
    const allergies = profile.allergies || {};
    const lifestyle = profile.lifestyle_factors || {};
    if (allergies.drug) parts.push(`**‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏û‡πâ‡∏¢‡∏≤ (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å): ${allergies.drug}**`);
    if (allergies.food) parts.push(`**‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏û‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£: ${allergies.food}**`);
    if (allergies.other) parts.push(`**‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏û‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÜ: ${allergies.other}**`);
    if (profile.current_medications?.length > 0) {
        const medList = profile.current_medications.map(m => `${m.name} ${m.dose} ${m.frequency}`).join(', ');
        parts.push(`**‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${medList}**`);
    }
    if (profile.chronic_conditions?.length > 0) parts.push(`‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∑‡∏≠ ${profile.chronic_conditions.join(', ')}`);
    if (profile.past_surgical_history) parts.push(`‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î: ${profile.past_surgical_history}`);
    if (profile.family_history) parts.push(`‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ô‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß: ${profile.family_history}`);
    if (lifestyle.smoking && lifestyle.smoking !== 'never') parts.push(`‡∏Å‡∏≤‡∏£‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà: ${lifestyle.smoking}`);
    if (lifestyle.alcohol && lifestyle.alcohol !== 'none') parts.push(`‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå: ${lifestyle.alcohol}`);
    if (profile.additional_notes) parts.push(`‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: "${profile.additional_notes}"`);
    const profileContext = parts.length > 0 ? parts.join('. ') : "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏ß‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©";
    const vitals = userData.vitals || {};
    const vitalsParts = [];
    if (vitals.bp) vitalsParts.push(`‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô ${vitals.bp} mmHg`);
    if (vitals.hr) vitalsParts.push(`‡∏ä‡∏µ‡∏û‡∏à‡∏£ ${vitals.hr}/min`);
    if (vitals.rr) vitalsParts.push(`‡∏´‡∏≤‡∏¢‡πÉ‡∏à ${vitals.rr}/min`);
    if (vitals.temp) vitalsParts.push(`‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ ${vitals.temp}¬∞C`);
    const vitalsContext = vitalsParts.length > 0 ? `- **‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ä‡∏µ‡∏û:** ${vitalsParts.join(', ')}` : '';
    return `
      ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ ${userData.name} (‡∏≠‡∏≤‡∏¢‡∏∏ ${userData.age} ‡∏õ‡∏µ, ‡πÄ‡∏û‡∏® ${userData.sex}) ‡∏ó‡∏µ‡πà‡∏°‡∏µ BMI ${bmi.value} (${bmi.category}).
      **‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:**
      - **‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:** "${userData.symptoms}"
      - **‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏ô‡∏≤‡∏ô:** ${userData.symptom_duration}
      - **‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏°‡∏∑‡πâ‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:** ${userData.previous_meal || '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏'}
      ${vitalsContext}
      
      **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î!): ${profileContext}**
    `;
}

async function getAiAnalysis(userData) {
    const bmi = calculateBMI(userData.weight, userData.height);
    const fullContext = buildFullContext(userData, bmi);
    console.log("ü§ñ [Service] Creating Prompt with V3 (Hybrid) Context:\n", fullContext);
    
    // --- START: UPDATED PROMPT ---
    const prompt = `
      **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (RAW DATA FOR ANALYSIS):**
      ${fullContext}

      **‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (MANDATORY THINKING PROCESS):**
      ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á JSON ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:
      1.  **‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πá‡∏à‡∏à‡∏£‡∏¥‡∏á (Fact Summary):** ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏≠‡∏≤‡∏Å‡∏≤‡∏£, ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤, ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û) ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°
      2.  **‡∏£‡∏∞‡∏ö‡∏∏‡∏†‡∏≤‡∏ß‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ (Potential Conditions Analysis):** ‡∏à‡∏≤‡∏Å "‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô" ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡πÉ‡∏´‡πâ‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏†‡∏≤‡∏ß‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ 2-3 ‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡πÑ‡∏°‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏ß‡∏∞‡∏ô‡∏±‡πâ‡∏ô‡πÜ
      3.  **‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á (Risk Evaluation & Triage):** ‡∏ô‡∏≥‡∏†‡∏≤‡∏ß‡∏∞‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠ 2 ‡∏°‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏π‡∏á‡πÑ‡∏õ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡πÑ‡∏°‡∏†‡∏≤‡∏ß‡∏∞ A ‡∏ñ‡∏∂‡∏á‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏†‡∏≤‡∏ß‡∏∞ B
      4.  **‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (Final Conclusion):** ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏ß‡∏∞‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á JSON
      
      **‡∏Ç‡πâ‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (DATA ADHERENCE MANDATE):**
      ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö" ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤ *‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô* ‡∏´‡πâ‡∏≤‡∏°‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ñ‡∏∂‡∏á‡πÇ‡∏£‡∏Ñ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á (Hallucination) ‡∏à‡∏∞‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ú‡∏¥‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á

      **‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á JSON ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å (MANDATORY JSON STRUCTURE):**
      ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô JSON object ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô **‡πÇ‡∏î‡∏¢‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û" ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß** ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏à‡∏∞‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏ú‡∏¥‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
      {
        "primary_assessment": "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ö‡∏ó‡∏™‡∏£‡∏∏‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏ñ‡∏∂‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å '‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û' ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ï‡πà‡∏≠ '‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô' ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠",
        "risk_analysis": [{"condition": "...", "risk_level": "...", "rationale": "‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô '‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û' ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏ß‡∏∞‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£"}],
        "personalized_care": {
          "immediate_actions": ["..."],
          "general_wellness": ["‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô '‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û' ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á"],
          "activity_guidance": { "recommended": ["..."], "to_avoid": ["..."] }
        },
        "dietary_recommendations": {
          "concept": "‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á '‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô' ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô '‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û'",
          "foods_to_eat": { "main_dishes": ["..."], "snacks_and_fruits": ["..."], "drinks": ["..."] },
          "foods_to_avoid": ["‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô '‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û' ‡πÅ‡∏•‡∏∞‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö '‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô' ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö ‡∏ö‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô Bullet Point"]
        },
        "red_flags": ["‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô '‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û' ‡πÅ‡∏•‡∏∞‡∏ö‡∏≠‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ Bullet Point"],
        "disclaimer": "‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ AI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏°‡∏≤ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡∏à‡∏≤‡∏Å‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
      }
      
      **‡∏Ç‡πâ‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (OUTPUT RULES):**
      1.  **‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:** ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏∏‡∏Å‡∏™‡πà‡∏ß‡∏ô ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• '‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û' (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡πÄ‡∏™‡∏°‡∏≠
      2.  ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "risk_level" ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÉ‡∏î‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô: 'high', 'medium', 'low', 'info'
      3.  ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö "risk_analysis" ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÑ‡∏õ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
      4.  ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á JSON ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå ‡∏´‡πâ‡∏≤‡∏°‡∏Ç‡∏≤‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô
      5.  ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡∏´‡πâ‡∏≤‡∏°‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÇ‡∏£‡∏Ñ ‡πÅ‡∏•‡∏∞**‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏¢‡∏≤‡πÉ‡∏î‡πÜ ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô**
      6.  ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "risk_analysis" ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏Ñ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö (‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©) ‡πÄ‡∏ä‡πà‡∏ô "‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô (Diabetes)"
      7.  ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "foods_to_eat" ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡πà‡∏≠‡∏¢
      8.  ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
       `;
    // --- END: UPDATED PROMPT ---

    const jsonStringResponse = await generateContent(prompt); 
    try {
        const parsedResponse = JSON.parse(jsonStringResponse);
        console.log("‚úÖ [AI Service] Successfully parsed JSON response");
        return parsedResponse;
    } catch (parseError) {
        console.error('‚ùå [AI Service] Failed to parse JSON response:', parseError.message);
        // Log only first 500 chars to avoid sensitive data exposure
        console.error('üìÑ [AI Service] Response content:', jsonStringResponse.substring(0, 500));
        throw new Error('AI service returned invalid response format. Please check API configuration or try again later.');
    }
}

const normalizeAiResponse = (analysis) => {
    console.log("üîÑ [Service] Normalizing AI Response...");

    // Personalized Care normalization
    if (!analysis.personalized_care) analysis.personalized_care = {};
    const care = analysis.personalized_care;
    if (typeof care.general_wellness === 'string') care.general_wellness = [care.general_wellness];
    else if (!Array.isArray(care.general_wellness)) care.general_wellness = [];
    if (Array.isArray(care.activity_guidance)) care.activity_guidance = { recommended: care.activity_guidance, to_avoid: [] };
    else if (typeof care.activity_guidance !== 'object' || care.activity_guidance === null) care.activity_guidance = { recommended: [], to_avoid: [] };

    // --- START: ADDED FIX ---
    // Dietary Recommendations normalization: Ensure the object and its children exist
    if (!analysis.dietary_recommendations) {
        analysis.dietary_recommendations = {
            concept: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
            foods_to_eat: { main_dishes: [], snacks_and_fruits: [], drinks: [] },
            foods_to_avoid: []
        };
    } else {
        if (!analysis.dietary_recommendations.foods_to_eat) {
            analysis.dietary_recommendations.foods_to_eat = { main_dishes: [], snacks_and_fruits: [], drinks: [] };
        }
        if (typeof analysis.dietary_recommendations.foods_to_avoid === 'object' && !Array.isArray(analysis.dietary_recommendations.foods_to_avoid)) {
            if (analysis.dietary_recommendations.foods_to_avoid.reasoning) {
                analysis.dietary_recommendations.foods_to_avoid = [analysis.dietary_recommendations.foods_to_avoid.reasoning];
            } else {
                analysis.dietary_recommendations.foods_to_avoid = [];
            }
        } else if (!Array.isArray(analysis.dietary_recommendations.foods_to_avoid)) {
            analysis.dietary_recommendations.foods_to_avoid = [];
        }
    }
    // --- END: ADDED FIX ---
    
    // Red Flags normalization
    if (Array.isArray(analysis.red_flags) && analysis.red_flags.length > 0 && typeof analysis.red_flags[0] === 'object') {
        analysis.red_flags = analysis.red_flags.map(flag => flag.condition || "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    }

    console.log("üëç [Service] Normalization complete.");
    return analysis;
};


async function getAiAssessment(userData) {
    const { name } = userData;
    console.log(`[Service] Starting assessment process for: ${name}`);
    const bmi = calculateBMI(userData.weight, userData.height);
    let analysis;
    let lastAiError = null;
    const maxRetries = 3; 

    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            console.log(`[Service Attempt ${attempt}/${maxRetries}] Calling AI...`);
            let rawAnalysis = await getAiAnalysis(userData);
            analysis = normalizeAiResponse(rawAnalysis); 
            lastAiError = null;
            break; 
        } catch (aiError) {
            lastAiError = aiError;
            console.error(`‚ùå [Service Attempt ${attempt}] Failed: ${aiError.message}`);
            if (attempt < maxRetries) {
                await delay(2000);
            }
        }
    }

    if (lastAiError) {
        throw new Error(`Could not communicate with AI after ${maxRetries} attempts: ${lastAiError.message}`);
    }
    
    return {
        userInfo: { name: userData.name, age: userData.age, sex: userData.sex },
        bmi: { ...bmi, weight: userData.weight, height: userData.height },
        analysis: analysis
    };
}

export default { getAiAssessment };